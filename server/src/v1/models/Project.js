// Importation du module mongoose pour la gestion des mod√®les et sch√©mas de donn√©es
const mongoose = require('mongoose');
// Importation du constructeur Schema de mongoose
const Schema = mongoose.Schema;
// Importation des options de sch√©ma d√©finies dans le fichier modelOptions
const { schemaOptions } = require('./modelOptions');

/**
 * Sch√©ma de donn√©es pour les projets.
 * @property user - R√©f√©rence √† l'utilisateur propri√©taire (ID d'objet requis).
 * @property guest - R√©f√©rence √† l'utilisateur invit√© (ID d'objet).
 * @property icon - Ic√¥ne du projet (cha√Æne, valeur par d√©faut : 'üìÉ').
 * @property title - Titre du projet (cha√Æne, valeur par d√©faut : 'Sans titre').
 * @property description - Description du projet (cha√Æne, valeur par d√©faut : texte multiligne).
 * @property position - Position du projet (nombre).
 * @property favourite - √âtat "favori" du projet (bool√©en, valeur par d√©faut : false).
 * @property favouritePosition - Position dans les favoris (nombre, valeur par d√©faut : 0).
 * @property shared - √âtat "partag√©" du projet (bool√©en, valeur par d√©faut : false).
 * @property sharedPosition - Position dans les projets partag√©s (nombre, valeur par d√©faut : 0).
 * @schemaOptions - Options sp√©cifiques du sch√©ma.
 */
const projectSchema = new Schema(
	{
		user: {
			type: Schema.Types.ObjectId,
			ref: 'User', // R√©f√©rence au mod√®le 'User'
			required: true, // Champ requis
		},
		guest: {
			type: Schema.Types.ObjectId,
			ref: 'User', // R√©f√©rence au mod√®le 'User' pour les invit√©s
		},
		icon: {
			type: String,
			default: 'üìÉ', // Valeur par d√©faut pour l'ic√¥ne du projet
		},
		title: {
			type: String,
			default: 'Sans titre', // Valeur par d√©faut pour le titre du projet
		},
		description: {
			type: String,
			default: `Ajoutez une description ici
    üü¢ Cela peut peut √™tre une description multiligne
    üü¢ Commencez par remplacer ce texte...`, // Valeur par d√©faut pour la description du projet
		},
		position: {
			type: Number, // Champ de type nombre pour la position du projet
		},
		favourite: {
			type: Boolean,
			default: false, // Valeur par d√©faut pour l'√©tat "favori" du projet
		},
		favouritePosition: {
			type: Number,
			default: 0, // Valeur par d√©faut pour la position dans les favoris
		},
		shared: {
			type: Boolean,
			default: false, // Valeur par d√©faut pour l'√©tat "partag√©" du projet
		},
		sharedPosition: {
			type: Number,
			default: 0, // Valeur par d√©faut pour la position dans les projets partag√©s
		},
	},
	schemaOptions
);

// Cr√©ation d'un mod√®le 'Project' √† partir du sch√©ma d√©fini
const Project = mongoose.model('Project', projectSchema);

// Exportation du mod√®le de projet
module.exports = Project;
